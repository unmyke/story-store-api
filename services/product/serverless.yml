service: product

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs16.x
  region: eu-west-1
  profile: serverless
  stage: ${opt:stage, 'dev'}
  httpApi:
    cors: true
  vpc:
    securityGroupIds:
      - !Ref LambdaSecurityGroup
    subnetIds:
      - !Ref SubnetAPrivate
      - !Ref SubnetBPrivate
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action: ['sns:*']
          Resource:
            Ref: 'CreateProductSnsTopic'
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    DB_HOST: ${self:custom.database.HOST}
    DB_PORT: ${self:custom.database.PORT}
    DB_NAME: ${self:custom.database.NAME}
    DB_AUTH: ${self:custom.database.AUTH}
    DB_USER: ${self:custom.database.USER}
    DB_PASSWORD: ${self:custom.database.PASSWORD}
    DB_REGION: ${self:provider.region}
    NOTIFIER_REGION: ${self:provider.region}
    NOTIFIER_BASE_ARN: arn:aws:sns:${self:provider.region}:${aws:accountId}
    NOTIFIER_CREATE_PRODUCT_TOPIC: ${self:custom.notifier.createProduct.TOPIC_NAME}

plugins:
  - serverless-webpack

custom:
  webpack:
    packager: 'yarn'
  bundle:
    ignorePackages:
      - pg-native
  database:
    HOST: !GetAtt AuroraRdsCluster.Endpoint.Address
    PORT: ${file(./secrets.yml):${self:provider.stage}.db.port}
    NAME: ${file(./secrets.yml):${self:provider.stage}.db.database}
    AUTH: ${file(./secrets.yml):${self:provider.stage}.db.auth, 'simple'}
    USER: ${file(./secrets.yml):${self:provider.stage}.db.user}
    PASSWORD: ${file(./secrets.yml):${self:provider.stage}.db.password}
    PROXY_NAME: proxy-${opt:stage, 'dev'}
    VPC_CIDR: 10
  queues:
    CATALOG_ITEMS: ${file(./secrets.yml):${self:provider.stage}.queues.catalogItems}
  notifier:
    createProduct:
      TOPIC_NAME: ${file(./secrets.yml):${self:provider.stage}.notifier.createProduct.topicName}
      emails:
        LOW_PRICE: ${file(./secrets.yml):${self:provider.stage}.notifier.createProduct.emails.lowPrice}
        HIGH_PRICE: ${file(./secrets.yml):${self:provider.stage}.notifier.createProduct.emails.highPrice}

functions:
  create-product:
    handler: src/index.createProduct
    events:
      - httpApi:
          path: /${self:provider.stage}/products
          method: post

  get-product-by-id:
    handler: src/index.getProductById
    events:
      - httpApi:
          path: /${self:provider.stage}/products/{id}
          method: get

  get-product-list:
    handler: src/index.getProductList
    events:
      - httpApi:
          path: /${self:provider.stage}/products
          method: get

  catalog-batch-process:
    handler: src/index.catalogBatchProcess
    events:
      - sqs:
          arn: !GetAtt CatalogItemsSqsQueue.Arn
          batchSize: 5

resources:
  - ${file(resources/VpcResources.yml)}
  - ${file(resources/RoutingResources.yml)}
  - ${file(resources/RdsResources.yml)}
  - ${file(resources/SqsResources.yml)}
  - ${file(resources/SnsResources.yml)}
